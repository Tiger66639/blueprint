{"name":"Blueprint","tagline":"","body":"Blueprint Build System\r\n======================\r\n[![Build Status](https://travis-ci.org/Tiger66639/blueprint.svg)](https://travis-ci.org/Tiger66639/blueprint)\r\n\r\nBlueprint is a meta-build system that reads in Blueprints files that describe\r\nmodules that need to be built, and produces a\r\n[Ninja](http://martine.github.io/ninja/) manifest describing the commands that\r\nneed to be run and their dependencies.  Where most build systems use built-in\r\nrules or a domain-specific language to describe the logic for converting module\r\ndescriptions to build rules, Blueprint delegates this to per-project build\r\nlogic written in Go.  For large, heterogenous projects this allows the inherent\r\ncomplexity of the build logic to be maintained in a high-level language, while\r\nstill allowing simple changes to individual modules by modifying easy to\r\nunderstand Blueprints files.\r\npackage jenkins.plugins.ui_samples.ModularizeViewScript\r\n\r\nimport org.kohsuke.stapler.jelly.groovy.JellyBuilder\r\nimport jenkins.util.groovy.AbstractGroovyViewModule\r\n\r\nnamespace(\"/lib/samples\").sample(title:_(\"Define View Fragments Elsewhere\")) {\r\n\r\n    // normally this is how you generate tags,\r\n    // but these are actually just a syntax sugar for method calls to the \"builder\" object (which is set as the delegate of the script for you)\r\n    h2(\"One\")\r\n    div (style:\"border:1px solid blue\") {\r\n        p(\"some pointless text\")\r\n    }\r\n\r\n    // so all we need to do is to pass around this delegate object and then you can generate fragments\r\n    // from elsewhere\r\n    new SomeGenerator(builder).generateSomeFragment()\r\n}\r\n\r\n\r\n// I defined this class here just to make the sample concise.\r\n// this class can be defined anywhere, and typically you'd do this somewhere in your src/main/groovy\r\nclass SomeGenerator extends AbstractGroovyViewModule {\r\n    SomeGenerator(JellyBuilder builder) {\r\n      super(builder)\r\n    }\r\n\r\n    def generateSomeFragment() {\r\n        h2(\"Two\")\r\n        div(style:\"background-color:gray; padding:2em\") {\r\n            p(\"Hello\")  // once inside a closure, no explicit 'b.' reference is needed. this is just like other Groovy builders\r\n\r\n            // calling other methods\r\n            generateMoreFragment(\"Testing generation\");\r\n        }\r\n    }\r\n\r\n    def generateMoreFragment(String msg) {\r\n        h2(msg);\r\n        f.textarea();\r\n    }\r\n}\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}